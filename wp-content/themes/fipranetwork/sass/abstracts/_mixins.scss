// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
@function parseInt($n) { /* 2 */
  @return $n / ($n * 0 + 1);
}


/// Rem font size with pixel fallback
/// @access public
/// @param {Integer} $sizeValue
@mixin font-size($size: 16, $lineHeight: (parseInt($size) * 1.5)) {
  font-size: parseInt($size) * 1px;
  line-height: parseInt($lineHeight) * 1px;
  font-size: (parseInt($size) / 10) + rem;
  line-height: (parseInt($lineHeight) / 10) + rem;
}



@mixin rem($property, $values) {
  $px : (); /* 3 */
  $rem: (); /* 3 */

  @each $value in $values { /* 4 */

    @if $value == 0 or $value == auto { /* 5 */
      $px : append($px , $value);
      $rem: append($rem, $value);
    }

    @else {
      $unit: unit($value);    /* 6 */
      $val: parseInt($value); /* 6 */

      @if $unit == "px" {  /* 7 */
        $px : append($px,  $value);
        $rem: append($rem, ($val / 10 + rem));
      }

      @if $unit == "rem" { /* 7 */
        $px : append($px,  ($val * 10 + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {     /* 8 */
    #{$property}: $px;  /* 9 */
  } @else {
    #{$property}: $px;  /* 9 */
    #{$property}: $rem; /* 9 */
  }
}

/// Helper to size an element
/// @author Hugo Giraudel
/// @param {Length} $width
/// @param {Length} $height
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

/// Helper to add padding to an element
/// @param $value
@mixin pad($value: 20px) {
  padding-left: parseInt($value) * 1px;
  @include rem('padding-left', $value);
  padding-right: parseInt($value) * 1px;
  @include rem('padding-right', $value);
  padding-top: parseInt($value) * 1px;
  @include rem('padding-top', $value);
  padding-bottom: parseInt($value) * 1px;
  @include rem('padding-bottom', $value);
}

/// Helper to add padding to top and bottom of element
/// @param $value
@mixin tb-pad($value: 10px) {
  padding-top: parseInt($value) * 1px;
  @include rem('padding-top', $value);
  padding-bottom: parseInt($value) * 1px;
  @include rem('padding-bottom', $value);
}

/// Helper to add padding to left and right of element
/// @param $value
@mixin lr-pad($value: 20px) {
  padding-left: parseInt($value) * 1px;
  @include rem('padding-left', $value);
  padding-right: parseInt($value) * 1px;
  @include rem('padding-right', $value);
}

/// Helper function for font weights
@mixin font-weight($weight: 'regular') {
  font-family: "UniformRounded--#{$weight}", sans-serif;
}

// Convert ul or ol tags to vertical menus
@mixin v-menu($margin: 'top', $marginAmount: $small-spacing) {
  list-style: none;
  padding:0;
  margin:0;

  li {
    padding:0;
    background: transparent;
  }

  @if($margin == 'bottom') {
    li {
      margin-bottom: $marginAmount;
    }
  }

  @if($margin == 'top')  {
    li {
      margin-top: $marginAmount;
    }
  }
}

// Convert ul or ol tags to horizontal menus
@mixin h-menu($margin: 'right', $marginAmount: 1rem) {
  display: flex;
  list-style: none;
  padding:0;
  margin:0;

  li {
    padding:0;
    background: transparent;
  }

  @if($margin == 'right') {
    li:not(:last-of-type) {
      margin-right: $marginAmount;
    }
  }
  @if($margin == 'left')  {
    li:not(:first-of-type) {
      margin-left: $marginAmount;
    }
  }
}

// Grid container helper
@mixin container($include-padding: true) {
  @include grid-container;
  max-width:$max-container-width;
  margin:0 auto;

  @if($include-padding == true) {

    padding-left:2rem;
    padding-right:2rem;

    @include grid-media($grid-tablet-plus) {
      padding-left:3rem;
      padding-right:3rem;
    }

  }
}

// Create a box component
@mixin box($color: white) {
  background:linear-gradient(to bottom, $color 50%, darken($color, 4%) 100%), $color;
  padding:2rem;
  border-radius: 0.5rem;
  box-shadow:0 0.2rem 0.2rem rgba(black, 0.3);
}

@mixin grow-on-hover($scale: 1.1, $duration: $base-duration, $timing: $base-timing) {
  transition:all $duration $timing;

  &:hover {
    transform: scale($scale);
  }
}

@mixin base-box-shadow() {
  box-shadow:0 0.2rem 0.2rem rgba(black, 0.3);
}

@mixin high-box-shadow() {
  box-shadow:0 1.4rem 0.8rem rgba(black, 0.2);
}

// Reset button tags
@mixin button-reset() {
  display: inline-block;
  border: none;
  padding: 0;
  margin: 0;
  text-decoration: none;
  background: inherit;
  color: inherit;
  font-size: $base-font-size;
  cursor: pointer;
  text-align: center;
}

// Base transition rule
@mixin transition() {
  transition: all $base-duration $base-timing;
}